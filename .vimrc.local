if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

set mouse=n
set mouse+=v
" Disable all blinking:
set guicursor+=a:blinkon0

" ---------------------------------------------------------------------------- "
" General Settings                                                             "
" ---------------------------------------------------------------------------- "
syntax on
set showcmd

let no_buffers_menu=1

set mousemodel=popup
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10

if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h12
    set transparency=7
  endif
else
  let g:CSApprox_loaded = 1

  " IndentLine
  let g:indentLine_enabled = 1
  let g:indentLine_concealcursor = 0
  let g:indentLine_char = '┆'
  let g:indentLine_faster = 1

  
  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif
  
endif


set autoread                    " Auto reload file after external command
set background=light            " Use a dark background
set backspace=indent,eol,start  " Delete over line breaks
set binary                      " Enable binary support
"set colorcolumn=80,120          " Show ruler columns
set fileformats=unix,dos,mac
set encoding=utf-8              " Use UTF-8 encoding
set fileencoding=utf-8
set fileencodings=utf-8
set hidden                      " Hide buffers instead of closing them
set laststatus=2                " Always display the status line
set nofoldenable                " Disable folding
set lazyredraw                  " Use lazy redrawing
set noshowmode                  " Don't show mode
set number                      " Show line numbers
set pastetoggle=<F1>            " Toggle paste mode with F2
set ruler                       " Show ruler
set showcmd                     " Show current command
set showmatch                   " Show matching bracket/parenthesis/etc
set showmode                    " Show current mode
set tags=tags;                  " Find tags recursively
set title                       " Change terminal title
set ttyfast                     " Fast terminal
set wildmenu                    " Visual autocomplete for command menu
set clipboard^=unnamed,unnamedplus
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set sidescroll=1                " sensible horizontal scroll
set nostartofline               " scrolling don't change cursor position
set cursorline
" set cursorlineopt=screenline
" Temp Files
set nobackup                    " No backup file
set noswapfile                  " No swap file

" Search
set incsearch                   " Incremental search
set hlsearch                  " No Highlight matches
set ignorecase                  " Case-insensitive search...
set smartcase                   " ...unless search contains uppercase letter

" Indentation
set smarttab                    " Better tabs
set smartindent                 " Insert new level of indentation
set autoindent                  " Copy indentation from previous line
set tabstop=4                   " Columns a tab counts for
set softtabstop=4               " Columns a tab inserts in insert mode
set shiftwidth=4                " Columns inserted with the reindent operations
set shiftround                  " Always indent by multiple of shiftwidth
set expandtab                   " Always use spaces instead of tabs

" Key sequence timeout
set ttimeout                    " Enable time out
set ttimeoutlen=0               " Disable key code delay

" Wrapping
set nowrap                      " Don't wrap long lines
set linebreak                   " Dont split words, doesn't work with set list
set textwidth=0                 " Turn off physical line wrapping
set wrapmargin=0                " Turn off physical line wrapping

" Joining
set nojoinspaces                " Only one space when joining lines
set formatoptions+=j            " Remove comment leader when joining lines

" Scroll
set sidescrolloff=3             " Keep at least 3 lines left/right
set scrolloff=3                 " Keep at least 3 lines above/below

" Disable bell
set visualbell                  " Disable visual bell
set noerrorbells                " Disable error bell

" Treat given characters as a word boundary
set iskeyword-=.                " Make '.' end of word designator
set iskeyword-=#                " Make '#' end of word designator

" Splits
" set splitbelow                  " Horizontal split below
set splitright                  " Vertical split right

" Spell checking
"set spelllang=en_us             " English as default language
"set spell                       " Enable by default

" Invisible characters
set list
" set listchars=tab:>-,trail:.,precedes:<,extends:>,eol:$
set showbreak=↪
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:•

" Make completion menu behave like an IDE
set completeopt=longest,menuone,preview

" Disable modelines as a security precaution
set modelines=0
set nomodeline

set statusline+=%F

" Encryption
if has("crypt-blowfish2")
    set cm=blowfish2
endif

" History
set history=1000                " Remember more commands
if has('persistent_undo')
    set undofile                " Persistent undo
    set undodir=~/.vim/undo     " Location to store undo history
    set undolevels=1000         " Max number of changes
    set undoreload=10000        " Max lines to save for undo on a buffer reload
endif

" Neovim
if has('nvim')
  set wildoptions+=pum,tagfile
endif

" fzf configuration
"" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>e :FZF -m<CR>
"Recovery commands from history through FZF
nmap <leader>y :History:<CR>

if has('nvim-0.4.0') || has("patch-8.2.0191")
    let g:fzf_layout = { 'window': {
                \ 'width': 0.9,
                \ 'height': 0.7,
                \ 'highlight': 'Comment',
                \ 'rounded': v:false } }
else
    let g:fzf_layout = { "window": "silent botright 16split" }
endif

" nerdtree
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <F3> :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeMouseMode=3
let g:NERDTreeShowHidden=1
let g:NERDTreeChDirMode=2
let g:NERDTreeHijackNetrw=1

map <silent> - :Ex<CR>
let g:netrw_banner = 0
let g:netrw_liststyle = 3

" grep.vim
nnoremap <silent> <C-g> :Rgrep<CR>
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'

" conoline
let g:conoline_auto_enable = 1
let g:conoline_use_colorscheme_default_insert=1
let g:conoline_use_colorscheme_default_normal=1

" terminal emulation
nnoremap <silent> <leader>sh :terminal<CR>

" vim-qf configuration
let g:qf_mapping_ack_style = 1
let g:qf_auto_quit = 0
let g:qf_shorten_path = 0

" ---------------------------------------------------------------------------- "
" Key Mappings                                                                 "
" ---------------------------------------------------------------------------- "
" Scrolling
nnoremap <S-Up> 3<C-y>
vnoremap <S-Up> 3<C-y>
nnoremap <S-Down> 3<C-e>
vnoremap <S-Down> 3<C-e>
nnoremap <S-Right> 5z<Right>
vnoremap <S-Right> 5z<Right>
nnoremap <S-Left> 5z<Left>
vnoremap <S-Left> 5z<Left>

" Typos
" cnoreabbrev E e
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev W w

" Save file which you forgot to open with sudo
cnoremap w!! w !sudo tee % >/dev/null

" Wrap the current visual selection
vnoremap Q gq

" Wrap the current paragraph
nnoremap Q gqap

" Search for current visual selection
vnoremap // y/\V<C-R>"<CR>

" Redraw the screen and remove highlighting
nnoremap <silent> <leader><space>:set hlsearch!<CR>


command -nargs=* MMake :make! <q-args><bar>copen

nnoremap <C-f> "vyiw:execute 'vimgrep /\V\C'. getreg("v") . '/g' fnameescape(expand('%'))<Cr>/\V<C-R>v<Cr>
vnoremap <C-f> "vy:execute 'vimgrep /\V\C'. getreg("v") . '/g' fnameescape(expand('%'))<Cr>/\V<C-R>v<Cr>
nnoremap <silent> > :bnext<Cr>
nnoremap <silent> < :bprev<Cr>
nnoremap <silent> <Leader>c :Bdelete!<Cr>


nmap ( <Plug>(qf_qf_previous)
nmap ) <Plug>(qf_qf_next)


map <F12> :set wrap!<Cr>
map <F5> <Plug>(qf_qf_toggle)
nmap <Leader><Enter>  :echo expand('%:p')<Cr>

" text operation
nnoremap <C-x> x
vnoremap <C-x> x
nnoremap x "xx
vnoremap x "xx
nnoremap X "xX
vnoremap X "xX

imap <c-d> <esc>ddi

"" Clean search (highlight)
nnoremap <silent> <leader><space> :set hlsearch!<CR>

"" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h
noremap <Tab> <C-w>w
noremap <S-Tab> <C-w>W

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

"" Open current line on GitHub
nnoremap <Leader>o :.Gbrowse<CR>

"" Split
noremap <Leader>s :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

"" Git
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

"" Tabs
nnoremap <leader>x gt
nnoremap <leader>z gT
nnoremap <silent> <leader>t :tabnew %<CR>
nnoremap <silent> <leader>w :tabclose<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" colorscheme
let g:gruvbox_contrast_light = 'medium'
silent! colorscheme gruvbox

" Find file in current directory and edit it.
function! Find(name)
   let l:list=system("find . -iname '".a:name."' | perl -ne 'print \"$.\\t$_\"'")
"   " replace above line with below one for gvim on windows
"   " let l:list=system("find . -iname ".a:name." | perl -ne \"print
"   qq{$.\\t$_}\"")
  let l:num=strlen(substitute(l:list, "[^\n]", "", "g"))
  if l:num < 1
    echo "'".a:name."' not found"
    return
  endif
  if l:num != 1
    echo l:list
    let l:input=input("Which ? (CR=nothing)\n")
    if strlen(l:input)==0
      return
    endif
    if strlen(substitute(l:input, "[0-9]", "", "g"))>0
      echo "Not a number"
      return
    endif
    if l:input<1 || l:input>l:num
      echo "Out of range"
      return
    endif
    let l:line=matchstr("\n".l:list, "\n".l:input."\t[^\n]*")
  else
    let l:line=l:list
  endif
  let l:line=substitute(l:line, "^[^\t]*\t./", "", "")
  execute ":e ".l:line
endfunction
command! -nargs=1 Find :call Find("<args>")

" https://unix.stackexchange.com/questions/199203/why-does-vim-indent-pasted-code-incorrectly
augroup auto_comment
    au!
    au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END

" " vim-numbertoggle - Automatic toggling between 'hybrid' and absolute line numbers
" " Maintainer:        <https://jeffkreeftmeijer.com>
" " Version:           2.1.1
" 
" augroup numbertoggle
"   autocmd!
"   autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
"   autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
" augroup END
